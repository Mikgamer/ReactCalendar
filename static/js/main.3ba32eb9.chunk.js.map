{"version":3,"sources":["Day.js","Calendar.js","App.js","reportWebVitals.js","index.js"],"names":["Day","props","state","notes","Notes","value","i","date","el","this","push","note","setState","onAddNote","ListNotes","forEach","index","Typography","sx","fontSize","overflowWrap","gutterBottom","day","month","year","Date","getDay","data","Grid","item","xs","sm","md","Card","variant","height","CardContent","color","getTheDay","LNotes","Stack","direction","spacing","TextField","m","onChange","event","target","multiline","IconButton","width","onClick","addTheNote","React","Screen","handleNote","notesArr","varmonth","getMonth","varyear","getFullYear","getDate","DataMonths","isLeap","isLeapMonth","getCMonth","getCYear","getCDay","borderColor","boxShadow","GridDays","Month","container","LinearProgress","textAlign","previousMonth","nextMonth","Box","GDays","position","bottom","Link","href","textDecoration","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ba32eb9.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport Stack from '@mui/material/Stack';\r\nimport Grid from '@mui/material/Grid';\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Typography from '@mui/material/Typography';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport AddIcon from '@mui/icons-material/Add';\r\n\r\nclass Day extends React.Component {\r\n\r\n\tconstructor(props)\t{\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tnotes : this.props.Notes,\r\n\t\t\tvalue: ''\r\n\t\t}\r\n\t}\r\n\r\n\t// Made to add a placeholder for the first of the month\r\n\taddANote(i) {if(i===0){return\"Add a note\"}}\r\n\r\n\taddTheNote(date,el) {\r\n\t\tconst notes = this.state.notes;\r\n\t\tnotes.push({date: date,note: el});\r\n\t\tthis.setState({\tnotes: notes }, () => this.props.onAddNote(this.state.notes) );\r\n\t\tthis.setState({ value: \"\" });\r\n\t}\r\n\r\n\tLNotes(date){\r\n\t\tconst ListNotes = [];\r\n\t\tthis.state.notes.forEach( (note, index) => {\r\n\t\t\tif (note.date === date) (\r\n\t\t\t\tListNotes.push(\r\n\t\t\t\t\t<Typography sx={{fontSize:14,overflowWrap:\"break-word\"}} key={index} gutterBottom>{note.note}</Typography>\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t})\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t{ListNotes}\r\n\t\t\t</>\r\n\t\t)\r\n\t}\r\n\r\n\tgetTheDay(day,month,year){\r\n\t\tconst months = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];\r\n\t\tconst days = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];\r\n\t\tconst theDay = new Date(months[month]+' '+day+', '+year+' 12:00:00');\r\n\t\treturn( days[theDay.getDay()] );\r\n\t}\r\n\r\n\r\n\r\n\trender(){\r\n\t\tvar date = this.props.data.day+\".\"+(this.props.data.month+1)+\".\"+this.props.data.year;\r\n\t\treturn (\r\n\t\t\t<Grid item xs={6} sm={3} md={2}>\r\n\t\t\t\t<Card variant=\"outlined\" date={date} sx={{height:\"100%\"}}>\r\n\t\t\t\t\t<CardContent>\r\n\t\t\t\t\t\t<Typography sx={{fontSize:14}} color=\"text.secondary\" gutterBottom>{this.getTheDay(this.props.data.day,this.props.data.month,this.props.data.year)} {this.props.data.day}</Typography>\r\n\t\t\t\t\t\t{this.LNotes(date)}\r\n\t\t\t\t\t\t<Stack direction=\"row\" spacing={0}>\r\n\t\t\t\t\t\t\t<TextField \r\n\t\t\t\t\t\t\tsx={{m:0}} onChange={event => this.setState({value:event.target.value})}\r\n\t\t\t\t\t\t\tvariant=\"standard\" multiline value={this.state.value}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<IconButton variant=\"outlined\" sx={{width:\"auto\",m:\"auto\"}} onClick={() => this.addTheNote(date,this.state.value)}>\r\n\t\t\t\t\t\t\t\t<AddIcon/>\r\n\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t</Stack>\r\n\t\t\t\t\t</CardContent>\r\n\t\t\t\t</Card>\r\n\t\t\t</Grid>\r\n\t\t);\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport default Day;","import * as React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Stack from '@mui/material/Stack';\r\nimport Grid from '@mui/material/Grid';\r\nimport Typography from '@mui/material/Typography';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport Link from '@mui/material/Link';\r\nimport Day from './Day.js';\r\n\r\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\r\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\r\n\r\nclass Screen extends React.Component {\r\n\r\n\tconstructor()\t{\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tvarmonth : new Date().getMonth(),\r\n\t\t\tvaryear : new Date().getFullYear(),\r\n\t\t\tnotes : []\r\n\t\t}\r\n\t}\r\n\r\n\t// Functions to get the current date \r\n\tgetCYear() {return new Date().getFullYear();}\r\n\tgetCMonth() {return new Date().getMonth();}\r\n\tgetCDay() {return new Date().getDate();}\r\n\r\n\t// Is the year a leap year ?\r\n\tisLeap(year) {\r\n\t  if (year % 4 === 0) {\r\n\t    if (year % 100 === 0){\r\n\t      if (year % 400 === 0){\r\n\t        return 1;\r\n\t      } else {return 0;}\r\n\t    } else {return 1;}\r\n\t  } else{return 0;}\r\n\t}\r\n\r\n\t// Return February's days\r\n\tisLeapMonth(month,year,DataMonths) {\r\n\t\tif (month===1) {\r\n\t\t\tif (this.isLeap(year)===1) {\r\n\t\t\t\treturn DataMonths[month][1]+1\r\n\t\t\t}\telse {return DataMonths[month][1]}\r\n\t\t}\telse {return DataMonths[month][1]}\r\n\t}\r\n\r\n\t// Return the number of days of the month(count leap years)\r\n\tMonth(month,year) {\r\n\t\tconst DataMonths = [[\"January\",31],[\"February\",28],[\"March\",31],[\"April\",30],[\"May\",31],[\"June\",30],[\"July\",31],[\"August\",31],[\"September\",30],[\"October\",31],[\"November\",30],[\"December\",31]];\r\n\t\t// const DataMonths = [[\"Janvier\",31],[\"Fevrier\",28],[\"Mars\",31],[\"Avril\",30],[\"Mai\",31],[\"Juin\",30],[\"Juillet\",31],[\"Aout\",31],[\"Septembre\",30],[\"Octobre\",31],[\"Novembre\",30],[\"Decembre\",31]];\r\n\t\tconst Days = [DataMonths[month][0],this.isLeapMonth(month,year,DataMonths)]\r\n\t\treturn Days\r\n\t}\r\n\r\n\t// Made to add a blue border for the current date\r\n\tisDay(month,year,day) {\r\n\t\tif (month===this.getCMonth()) {\r\n\t\t\tif (year===this.getCYear()) {\r\n\t\t\t\tif (day===this.getCDay()) {\r\n\t\t\t\t\treturn {borderColor:\"#2196f3\",boxShadow:5};\r\n\t\t\t\t} else {return {boxShadow:2}}\r\n\t\t\t}\telse {return {boxShadow:2}}\r\n\t\t} else {return {boxShadow:2}}\r\n\t}\r\n\r\n\thandleNote = (notesArr) => { this.setState({notes: notesArr}); }\r\n\r\n\t// Build cards for each days of the month\r\n\tGDays() {\r\n\t\tconst GridDays = [];\r\n\t\tfor (var i=1;i<this.Month(this.state.varmonth,this.state.varyear)[1]+1;i++) {\r\n\t\t\tGridDays.push(\r\n\t\t\t\t<Day key={i} data={{day:i,month:this.state.varmonth,year:this.state.varyear}} onAddNote={this.handleNote} Notes={this.state.notes} />\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<Grid container spacing={2}>\r\n\t\t\t\t{GridDays}\r\n      \t\t</Grid>\r\n\t\t)\r\n\t}\r\n\r\n\t// Button to change month\r\n\tpreviousMonth() {\r\n\t\tif (this.state.varmonth===0){\r\n\t\t\tthis.setState({varmonth:11,varyear:this.state.varyear-1})\r\n\t\t} else {this.setState({varmonth:this.state.varmonth-1})}\r\n\t}\r\n\r\n\tnextMonth() {\r\n\t\tif (this.state.varmonth===11){\r\n\t\t\tthis.setState({varmonth:0,varyear:this.state.varyear+1})\r\n\t\t} else {this.setState({varmonth:this.state.varmonth+1})}\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<>\r\n      \t\t\t<LinearProgress variant=\"determinate\" value={this.state.varmonth*100/11}/>\r\n\t\t\t\t<Stack direction=\"row\" spacing={1} sx={{m:2}} >\r\n\t\t\t\t\t<Typography sx={{fontSize:28,width:100,textAlign:\"center\"}}> {this.state.varyear} </Typography>\r\n\t\t\t\t\t<IconButton aria-label=\"previous\" onClick={()=>{this.previousMonth();}}> <ArrowBackIosNewIcon /> </IconButton>\r\n\t      \t\t\t<Typography sx={{fontSize:28,width:180,textAlign:\"center\"}}> {this.Month(this.state.varmonth,this.state.varyear)[0]} </Typography>\r\n\t      \t\t\t<IconButton aria-label=\"next\" onClick={()=>{this.nextMonth();}}> <ArrowForwardIosIcon/> </IconButton>\r\n\t\t\t\t</Stack>\r\n\t\t\t\t<Box sx={{ m:2 }}>\r\n\t\t\t\t\t{this.GDays()}\r\n\t\t\t\t</Box>\r\n\t\t\t\t<Typography sx={{fontSize:14, m:1, position:\"fixed\", bottom:0}}> Made by <Link href=\"http://mikgamer.fr\" sx={{textDecoration:\"none\"}}>Michael Perard</Link> </Typography>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport default Screen;","import * as React from 'react';\nimport './App.css';\nimport Screen from './Calendar.js';\n\nfunction App() {\n\n\n\treturn(\n\t\t<>\n\t\t\t<Screen />\n\t\t</>\n\t);\n\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}